{
    "swagger": "2.0",
    "info": {
      "description": "Dashboard for the Miranda API using node & express.",
      "version": "1.0.0",
      "title": "API MIRANDA",
      "contact": {
        "email": "javier.cabanasdiaz@gmail.com",
        "url": "https://github.com/vichule/node-express-app"
      }
      
    },
    "host": "bdbppxlpje.execute-api.eu-west-3.amazonaws.com/dev/",
    "basePath": "/",
    "tags": [
      {
        "name": "booking",
        "description": "Everything about your bookings"
        
      },
      {
        "name": "user",
        "description": "Operations about user"
        
      }
    ],
    "schemes": ["https"], 
    "paths": {
      "/bookings": {
        "get": {
          "tags": [
            "bookings"
          ],
          "summary": "Get all bookings stored",
          "description": "Returns all bookings",
          "operationId": "getBookings",
          "produces": [
            "application/json"
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Booking"
              }
            },
            "404": {
              "description": "Bookings data not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "post": {
          "tags": [
            "bookings"
          ],
          "summary": "Add a new booking to the store",
          "description": "",
          "operationId": "addBooking",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "type": "string"
            },
            {
              "in": "body",
              "name": "body",
              "description": "Booking object that needs to be added to the store",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Booking"
              }
            }
          ],
          "responses": {
            "405": {
              "description": "Invalid input"
            }
          }
        }
      },
      "/bookings/{bookingId}": {
        "get": {
          "tags": [
            "bookings"
          ],
          "summary": "Find booking by ID",
          "description": "Returns a single booking",
          "operationId": "getBookingById",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "bookingId",
              "in": "path",
              "description": "ID of booking to return",
              "required": true,
              "type": "integer",
              "format": "int64",
              "example": 10
            }
          ],
          "responses": {
            "200": {
              "description": "successful operation",
              "schema": {
                "$ref": "#/definitions/Booking"
              }
            },
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Booking not found"
            }
          },
          "security": [
            {
              "api_key": []
            }
          ]
        },
        "put": {
          "tags": [
            "bookings"
          ],
          "summary": "Update an existing booking",
          "description": "",
          "operationId": "editBooking",
          "consumes": [
            "application/json"
          ],
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "type": "string"
            },
            {
              "name": "bookingId",
              "in": "path",
              "description": "ID of booking to edit",
              "required": true,
              "type": "integer",
              "format": "int64",
              "example": 10
            },
            {
              "in": "body",
              "name": "body",
              "description": "booking object that needs to be added to the store",
              "required": true,
              "schema": {
                "$ref": "#/definitions/Booking"
              }
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Booking not found"
            },
            "405": {
              "description": "Validation exception"
            }
          }
        },
        "delete": {
          "tags": [
            "bookings"
          ],
          "summary": "Deletes a booking",
          "description": "",
          "operationId": "deleteBooking",
          "produces": [
            "application/json"
          ],
          "parameters": [
            {
              "name": "Authorization",
              "in": "header",
              "required": true,
              "type": "string"
            },
            {
              "name": "bookingId",
              "in": "path",
              "description": "booking id to delete",
              "required": true,
              "type": "integer",
              "format": "int64"
            }
          ],
          "responses": {
            "400": {
              "description": "Invalid ID supplied"
            },
            "404": {
              "description": "Booking not found"
            }
          },
          "security": [
            {
              "petstore_auth": [
                "write:pets",
                "read:pets"
              ]
            }
          ]
        }
      }
    },
    "definitions": {
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "userStatus": {
            "type": "integer",
            "format": "int32",
            "description": "User Status"
          }
        },
        "xml": {
          "name": "User"
        }
      },
      "Booking": {
        "type": "object",
        "required": [
          "id",
          "name"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "first_name": {
            "type": "string",
            "example": "Lucian"
          },
          "last_name": {
            "type": "string",
            "example": "Galton"
          },
          "order_date": {
            "type": "string",
            "format": "date-time",
            "example": "8/4/2023"
          },
          "check_in": {
            "type": "string",
            "format": "date-time",
            "example": "5/19/2023"
          },
          "check_out": {
            "type": "string",
            "format": "date-time",
            "example": "10/3/2023"
          },
          "notes": {
            "type": "string",
            "example": "Morbi quis tortor id nulla ultrices aliquet."
          },
          "room": {
            "type": "integer",
            "format": "int64",
            "example": 5
          },
          "room_type": {
            "type": "string",
            "example": "Suite"
          },
          "status": {
            "type": "string",
            "description": "booking status in the store",
            "enum": [
              "Check-in",
              "Check-out",
              "In progress",
              "Cancelled"
            ]
          }
        }
      }
    }
  }